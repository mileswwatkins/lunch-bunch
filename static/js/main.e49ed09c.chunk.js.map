{"version":3,"sources":["App.js","index.js"],"names":["MapContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","infoWindowVisible","activeRestaurant","activeMarker","onMarkerClick","bind","assertThisInitialized","onMapClick","markerProps","marker","setState","document","querySelector","concat","placeId","scrollIntoView","behavior","_this2","react_default","a","createElement","className","dist","google","window","centerAroundCurrentLocation","zoom","initialCenter","lat","lng","onReady","retrieveMap","onBounds_changed","debounce","handleMapBoundsChange","onClick","scrollwheel","fullscreenControl","mapTypeControl","streetViewControl","results","map","result","key","place_id","name","position","geometry","location","icon","url","markerNumber","visible","Component","Search","_this3","input","handleTextInput","performSearch","e","target","value","preventDefault","placesService","textSearch","query","type","bounds","mapBounds","handleSearchResults","previousProps","onSubmit","placeholder","onChange","Restaurants","App_Restaurant","rating","address","formatted_address","Restaurant","queryParameter","encodeURIComponent","data-hook","href","makeURL","App","_this4","mapProps","_this5","maps","places","PlacesService","slice","r","index","getBounds","role","aria-label","App_Search","App_MapContainer","App_Restaurants","initMap","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.e49ed09c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {InfoWindow, Map, Marker} from 'google-maps-react'\nimport {debounce} from 'lodash'\nimport './App.css'\n\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      infoWindowVisible: false,\n      activeRestaurant: null,\n      activeMarker: null\n    }\n\n    this.onMarkerClick = this.onMarkerClick.bind(this)\n    this.onMapClick = this.onMapClick.bind(this)\n  }\n\n  onMarkerClick(markerProps, marker) {\n    if (!this.state.activeMarker || this.state.activeMarker === marker) {\n      this.setState({\n        infoWindowVisible: !this.state.infoWindowVisible,\n        activeRestaurant: markerProps,\n        activeMarker: marker\n      })\n    } else {\n      this.setState({\n        activeRestaurant: markerProps,\n        activeMarker: marker\n      })\n    }\n\n    // Scroll the restaurant listing into view\n    const sidebarElement = document.querySelector(`div[data-hook=${markerProps.placeId}]`)\n    sidebarElement.scrollIntoView({behavior: \"smooth\"})\n  }\n\n  onMapClick() {\n    if (this.state.infoWindowVisible) {\n      this.setState({\n        infoWindowVisible: false,\n        activeMarker: null\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className='App-MapContainer'>\n        <Map\n          google={window.google}\n          centerAroundCurrentLocation={true}\n          zoom={15}\n          initialCenter={{lat: 37.79, lng: -122.41}}\n          onReady={this.props.retrieveMap}\n          onBounds_changed={debounce(this.props.handleMapBoundsChange, 500)}\n          onClick={this.onMapClick}\n          scrollwheel={false}\n          // These map controls could be included in future\n          // iterations, but would require further UX consideration\n          // as to how they serve this relatively focused,\n          // responsive web app\n          fullscreenControl={false}\n          mapTypeControl={false}\n          streetViewControl={false}\n        >\n          {this.props.results.map(result =>\n            <Marker\n              key={result.place_id}\n              placeId={result.place_id}\n              name={result.name}\n              position={result.geometry.location}\n              icon={{url: `https://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=${result.markerNumber}|FE6256`}}\n              onClick={this.onMarkerClick}\n            />\n          )}\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.infoWindowVisible}\n          >\n            <div>\n              <span className='App-MapContainer-InfoWindow'>{this.state.activeRestaurant && this.state.activeRestaurant.name}</span>\n            </div>\n          </InfoWindow>\n        </Map>\n      </div>\n    )\n  }\n}\n\n\nclass Search extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {input: ''}\n    \n    this.handleTextInput = this.handleTextInput.bind(this)\n    this.performSearch = this.performSearch.bind(this)\n  }\n\n  handleTextInput(e) {\n    this.setState({input: e.target.value})\n  }\n\n  performSearch(e) {\n    if (e) {e.preventDefault()}\n\n    this.props.placesService.textSearch(\n      {\n        query: this.state.input,\n        type: 'restaurant',\n        bounds: this.props.mapBounds\n      },\n      this.props.handleSearchResults\n    )\n  }\n\n  componentDidUpdate(previousProps) {\n    // When the search service first becomes available,\n    // run a query on all restaurants within the map bounds\n    if (!previousProps.placesService && this.props.placesService) {\n      this.performSearch()\n    }\n\n    if (previousProps.mapBounds !== this.props.mapBounds) {\n      this.performSearch()\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App-header-Search\" onSubmit={this.performSearch}>\n        <form className=\"App-header-Search-form\">\n          <input\n            type=\"text\"\n            className=\"App-header-Search-input\"\n            placeholder=\"Search your nearby restaurants\"\n            value={this.state.input}\n            onChange={this.handleTextInput}\n          />\n          <input type=\"submit\" value=\"Search\" className=\"App-header-Search-button\" />\n        </form>\n      </div>\n    )\n  }\n}\n\n\nclass Restaurants extends Component {\n  render() {\n    return (\n      <div className=\"App-Restaurants\">\n        {this.props.results.map(result =>\n          <Restaurant\n            key={result.place_id}\n            placeId={result.place_id}\n            markerNumber={result.markerNumber}\n            name={result.name}\n            rating={result.rating}\n            address={result.formatted_address}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\n\nclass Restaurant extends Component {\n  makeURL(name, address) {\n    // In future development cycles, this can be replaced\n    // with a call to the Google Place Details API, or an\n    // additional view with detailed Place information\n    const queryParameter = window.encodeURIComponent(`${name} ${address}`)\n    return `https://www.google.com/search?q=${queryParameter}`\n  }\n\n  render() {\n    return (\n      <div className=\"App-Restaurant\" data-hook={this.props.placeId}>\n        <h3 className=\"App-Restaurant-title\">\n          {`${this.props.markerNumber}. `}\n          <a href={this.makeURL(this.props.name, this.props.address)} target={'_blank'}>\n            {this.props.name}\n          </a>\n        </h3>\n        <span className=\"App-Restaurant-info\">Rating: {this.props.rating} / 5</span>\n        <span className=\"App-Restaurant-info\">{this.props.address}</span>\n      </div>\n    )\n  }\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      results: [],\n      map: null,\n      mapBounds: null,\n      placesService: null\n    }\n\n    this.handleSearchResults = this.handleSearchResults.bind(this)\n    this.retrieveMap = this.retrieveMap.bind(this)\n    this.handleMapBoundsChange = this.handleMapBoundsChange.bind(this)\n  }\n\n  retrieveMap(mapProps, map) {\n    this.setState(\n      {map: map},\n      () => {this.setState({\n        placesService: new window.google.maps.places.PlacesService(this.state.map)\n      })}\n    )\n  }\n\n  handleSearchResults(results) {\n    this.setState({\n      results: results\n        // Currently, only display a maximum of nine results;\n        // increase this via pagination in a future dev cycle\n        .slice(0, 9)\n        // Identify the Google Maps marker icon. The icon URL\n        // will be generated within the map element.\n        .map((r, index) => {\n          r.markerNumber = index + 1\n          return r\n        })\n    })\n  }\n\n  handleMapBoundsChange() {\n    // Unfortunately, the Google Maps `bounds_changed` event\n    // doesn't return the bounds value.\n    // This function is debounced in the prop assignment to\n    // avoid too-frequent calls.\n    this.setState({mapBounds: this.state.map.getBounds()})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-header-title\">\n            <span role=\"img\" aria-label=\"food emoji\">🍔</span>\n            {' Lunch Bunch '}\n            <span role=\"img\" aria-label=\"food emoji\">🍲</span>\n          </h1>\n          <span className=\"App-header-description\">\n            Find the hot new hot food near you!\n          </span>\n          <Search\n            handleSearchResults={this.handleSearchResults}\n            placesService={this.state.placesService}\n            mapBounds={this.state.mapBounds}\n          />\n        </header>\n\n        <div className=\"App-content\">\n          <MapContainer\n            map={this.state.map}\n            retrieveMap={this.retrieveMap}\n            handleMapBoundsChange={this.handleMapBoundsChange}\n            results={this.state.results}\n          />\n          <Restaurants\n            results={this.state.results}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\n// Wait until the Google Maps (and Places) libraries are loaded\nwindow.initMap = () => {\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n"],"sourceRoot":""}